apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: gitlab-push-binding
  namespace: tekton-builds
spec:
  params:
    - name: kind
      value: willbereplaced
    - name: resourcename
      value: willbereplaced
    - name: agnostnamespace
      value: willbereplaced
    - name: resourcenamespace
      value: willbereplaced
    - name: containerregistry
      value: willbereplaced
    - name: gitlabpat
      value: willbereplaced
    - name: gitbranch
      value: willbereplaced
    - name: gitsubpath
      value: willbereplaced
    - name: imagename
      value: willbereplaced
    - name: dockerfile
      value: willbereplaced
    - name: gitrevision
      value: $(body.after)
    - name: gitrepo
      value: $(body.repository.url)
    - name: gitcommitter
      value: $(body.user_username)
    - name: gitcommiturl
      value: $(body.commits[0].url)
    - name: gitrepourl
      value: $(body.repository.git_http_url)
    - name: gitreponame
      value: $(body.project.path_with_namespace)
    - name: gitcommitmessage
      value: $(body.commits[0].message)
    - name: gitcommittimestamp
      value: $(body.commits[0].timestamp)
---
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerTemplate
metadata:
  name: gitlab-template
  namespace: tekton-builds
spec:
  params:
    - name: kind
    - name: resourcename
    - name: agnostnamespace
    - name: resourcenamespace
    - name: containerregistry
    - name: gitlabpat
    - name: gitbranch
    - name: gitsubpath
    - name: gitrevision
    - name: gitrepo
    - name: imagename
    - name: dockerfile
    - name: gitcommitter
    - name: gitcommiturl
    - name: gitrepourl
    - name: gitreponame
    - name: gitcommitmessage
    - name: gitcommittimestamp
  resourcetemplates:
    - apiVersion: tekton.dev/v1beta1
      kind: TaskRun
      metadata:
        generateName: gitlab-run-
      spec:
        serviceAccountName: tekton-triggers-gitlab-sa
        workspaces:
        - name: ws
          emptyDir: {}
        taskSpec:
          workspaces:
          - name: ws
          steps:
          - name: setup
            image: bitnami/git:2.44.0
            env:
            - name: GIT_REPO
              value: $(tt.params.gitrepo)
            - name: GIT_BRANCH
              value: $(tt.params.gitbranch)
            - name: GIT_REVISION
              value: $(tt.params.gitrevision)
            - name: GIT_COMMITTER_USERNAME
              value: $(tt.params.gitcommitter)
            - name: SUB_PATH
              value: $(tt.params.gitsubpath)
            - name: GIT_COMMIT_URL
              value: $(tt.params.gitcommiturl)
            - name: GIT_REPO_URL
              value: $(tt.params.gitrepourl)
            - name: GIT_REPO_NAME
              value: $(tt.params.gitreponame)
            - name: GIT_COMMIT_MESSAGE
              value: $(tt.params.gitcommitmessage)
            - name: GIT_COMMIT_TIMESTAMP
              value: $(tt.params.gitcommittimestamp)
            script: |
              #!/bin/bash
              export URL=$(echo $(tt.params.gitrepourl) | sed "s|://|://oauth2:$(tt.params.gitlabpat)@|")
              export REPO_NAME=$(basename -s .git "$(tt.params.gitreponame)")
              echo "Workspace path: $(workspaces.ws.path)"
              echo "Repo name: ${REPO_NAME}"
              cd $(workspaces.ws.path)
              git clone ${URL} -b $(tt.params.gitbranch)
              cd ${REPO_NAME}
              echo "$(tt.params.containerregistry)/$(tt.params.imagename):$(echo $(tt.params.gitrevision) | head -c 7)" > $(workspaces.ws.path)/image
              echo "Image: $(cat $(workspaces.ws.path)/image)"
          - name: build
            image: gcr.io/kaniko-project/executor:v1.21.1-debug
            script: |
              #!/busybox/sh
              echo "Workspace path: $(workspaces.ws.path)"
              echo "Contents of $(workspaces.ws.path):"
              ls "$(workspaces.ws.path)"
              export IMAGE=$(cat $(workspaces.ws.path)/image)
              export REPO_NAME=$(basename -s .git "$(tt.params.gitreponame)")
              echo "Repo name: ${REPO_NAME}"
              echo "Image: ${IMAGE}"
              echo "Context: $(workspaces.ws.path)/${REPO_NAME}"
              echo "Sub path: $(tt.params.gitsubpath)"
              echo "Dockerfile: $(tt.params.dockerfile)"
              if [ "$(tt.params.containerregistry)" == "zot.$(tt.params.agnostnamespace):5000" ]; then
                /kaniko/executor \
                  --destination=${IMAGE} \
                  --context=$(workspaces.ws.path)/${REPO_NAME}/$(tt.params.gitsubpath) \
                  --dockerfile=$(tt.params.dockerfile) \
                  --no-push \
                  --tar-path=$(workspaces.ws.path)/image.tar
              else
                /kaniko/executor \
                  --destination=${IMAGE} \
                  --context=$(workspaces.ws.path)/${REPO_NAME}/$(tt.params.gitsubpath) \
                  --dockerfile=$(tt.params.dockerfile)
              fi
          - name: local-push
            image: quay.io/skopeo/stable:latest
            script: |
              #!/bin/bash
              if [ "$(tt.params.containerregistry)" == "zot.$(tt.params.agnostnamespace):5000" ]; then
                export IMAGE=$(cat $(workspaces.ws.path)/image)
                skopeo --insecure-policy copy \
                  --dest-authfile /root/.docker/config.json \
                  --dest-tls-verify=false --format=oci \
                  docker-archive:$(workspaces.ws.path)/image.tar docker://${IMAGE}
              else
                echo "Not using local registry, skipping ..."
              fi
          - name: deploy
            image: bitnami/kubectl:1.29.2
            script: |
              #!/usr/bin/bash
              export IMAGE=$(cat $(workspaces.ws.path)/image | sed 's/zot.$(tt.params.agnostnamespace):5000/localhost:30050/')
              kubectl set image $(tt.params.kind)/$(tt.params.resourcename) $(tt.params.resourcename)=${IMAGE} -n $(tt.params.resourcenamespace)
              kubectl rollout status $(tt.params.kind)/$(tt.params.resourcename) -n $(tt.params.resourcenamespace) -w
              kubectl annotate $(tt.params.kind)/$(tt.params.resourcename) kubernetes.io/change-cause="Update image to ${IMAGE}" -n $(tt.params.resourcenamespace)
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tekton-triggers-gitlab-sa
  namespace: tekton-builds
---
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-secret
  namespace: tekton-builds
type: Opaque
stringData:
  secretToken: "1234567"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: triggers-gitlab-eventlistener-binding
  namespace: tekton-builds
subjects:
- kind: ServiceAccount
  name: tekton-triggers-gitlab-sa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-triggers-eventlistener-roles
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: triggers-gitlab-eventlistener-clusterbinding
subjects:
- kind: ServiceAccount
  name: tekton-triggers-gitlab-sa
  namespace: tekton-builds
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-triggers-eventlistener-clusterroles
---
apiVersion: triggers.tekton.dev/v1beta1
kind: EventListener
metadata:
  name: gitlab-listener
  namespace: tekton-builds
spec:
  triggers:
    - name: gitlab-listener
      interceptors:
        - ref:
            name: "gitlab"
          params:
            - name: "secretRef"
              value:
                secretName: gitlab-secret
                secretKey: secretToken
            - name: "eventTypes"
              value: ["Push Hook"]
        - name: "Only for the specific branch"
          ref:
            name: "cel"
          params:
            - name: "filter"
              value: "body.ref == 'refs/heads/master'"
            # - name: "filter"
            #   value: "will be replaced or removed"
      bindings:
        - ref: gitlab-push-binding
      template:
        ref: gitlab-template
  resources:
    kubernetesResource:
      spec:
        template:
          spec:
            serviceAccountName: tekton-triggers-gitlab-sa
            containers:
              - resources:
                  requests:
                    memory: "64Mi"
                    cpu: "50m"
                  limits:
                    memory: "128Mi"
                    cpu: "100m"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: tekton-ingress
  namespace: tekton-builds
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 500m
    nginx.ingress.kubernetes.io/proxy-connect-timeout: '6000'
    nginx.ingress.kubernetes.io/proxy-send-timeout: '6000'
    nginx.ingress.kubernetes.io/proxy-read-timeout: '6000'
    nginx.ingress.kubernetes.io/proxy-next-upstream-timeout: '6000'
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /tekton-gitlab/(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: el-gitlab-listener
            port:
               number: 8080
