name: Create Release

on:
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Release Type'
        required: true
        type: choice
        default: 'patch'
        options:
          - 'patch'
          - 'minor'
          - 'major'
      monitor:
        description: 'Monitor Release'
        required: false
        default: 'no-change'
        type: choice
        options:
          - 'no-change'
          - 'patch'
          - 'minor'
          - 'major'
      platform:
        description: 'Platform Release'
        required: false
        default: 'no-change'
        type: choice
        options:
          - 'no-change'
          - 'patch'
          - 'minor'
          - 'major'
      studio:
        description: 'Studio Release'
        required: false
        default: 'no-change'
        type: choice
        options:
          - 'no-change'
          - 'patch'
          - 'minor'
          - 'major'
      sync:
        description: 'Sync Release'
        required: false
        default: 'no-change'
        type: choice
        options:
          - 'no-change'
          - 'patch'
          - 'minor'
          - 'major'
      webhook:
        description: 'Webhook Release'
        required: false
        default: 'no-change'
        type: choice
        options:
          - 'no-change'
          - 'patch'
          - 'minor'
          - 'major'

env:
  RELEASE_TYPE: '${{ github.event.inputs.release-type }}'
  MONITOR: '${{ github.event.inputs.monitor }}'
  PLATFORM: '${{ github.event.inputs.platform }}'
  STUDIO: '${{ github.event.inputs.studio }}'
  SYNC: '${{ github.event.inputs.sync }}'
  WEBHOOK: '${{ github.event.inputs.webhook }}'
  # GAR: Google Artifact Registry
  GAR_LOCATION: 'europe-docker.pkg.dev'
  GAR_PROJECT: 'agnost-gitops'
  GAR_NAME: 'images'
  CHARTS_REPO: 'cloud-agnost/agnost-gitops-charts'

jobs:
  get_released_apps:
    runs-on: ubuntu-latest
    outputs:
      applications: ${{ steps.get-applications.outputs.APPLICATIONS }}
      details: ${{ steps.get-details.outputs.DETAILS }}
      release_number: ${{ steps.get-release-number.outputs.RELEASE_NUMBER }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      -
        name: Install semver
        run: |
          wget https://github.com/ffurrer2/semver/releases/download/v2.2.0/semver_2.2.0_linux_amd64.tar.gz
          tar zxvf semver_2.2.0_linux_amd64.tar.gz
          cp semver /usr/local/bin
      -
        name: get-info
        run: |
          read -r APPLICATIONS DETAILS RELEASE_NUMBER <<< $(python .github/scripts/get_released_apps.py)
          echo APPLICATIONS=$APPLICATIONS >> $GITHUB_ENV
          echo DETAILS=$DETAILS >> $GITHUB_ENV
          echo RELEASE_NUMBER=$RELEASE_NUMBER >> $GITHUB_ENV
      -
        id: get-applications
        run: echo "APPLICATIONS=${{ env.APPLICATIONS }}" >> $GITHUB_OUTPUT
      -
        id: get-details
        run: echo "DETAILS=${{ env.DETAILS }}" >> $GITHUB_OUTPUT
      -
        id: get-release-number
        run: echo "RELEASE_NUMBER=${{ env.RELEASE_NUMBER }}" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: get_released_apps
    strategy:
      matrix:
        application: ${{ fromJSON(needs.get_released_apps.outputs.applications) }}
        include: ${{ fromJSON(needs.get_released_apps.outputs.details) }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Google Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: '${{ env.GAR_LOCATION }}'
          username: _json_key
          password: '${{ secrets.GOOGLE_CREDENTIALS }}'
      -
        name: Build and Push
        uses: docker/build-push-action@v5
        env:
          DOCKER_REGISTRY: ${{ env.GAR_LOCATION }}/${{ env.GAR_PROJECT }}/${{ env.GAR_NAME }}
        with:
          push: true
          context: ./${{ matrix.application }}
          file: ./${{ matrix.application }}/Dockerfile
          platforms: linux/arm64,linux/amd64
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ matrix.application }}:${{ matrix.version }}
            ${{ env.DOCKER_REGISTRY }}/${{ matrix.application }}:latest

  update-release-info:
    runs-on: ubuntu-latest
    needs: [get_released_apps, build]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
      -
        name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      -
        name: Install yaml library
        run: python -m pip install ruamel.yaml
      -
        name: Update release info
        env:
          RELEASE_NUMBER: ${{ needs.get_released_apps.outputs.release_number }}
        run: |
          python .github/scripts/update_package_json.py '${{ needs.get_released_apps.outputs.details }}'
          python .github/scripts/create_release_manifest.py '${{ needs.get_released_apps.outputs.details }}'
          if [ $(git status | grep -c "nothing to commit") == 0 ]; then
            git config user.name ${{ secrets.REPO_ACCESS_USER }}
            git config user.email ${{ secrets.REPO_ACCESS_EMAIL }}
            git diff
            git status
            git add releases/
            git commit -am "Updated package.json and release files [skip ci]"
            git push
          else
              echo "No changes, skipping..."
          fi

  update-helm-chart:
    runs-on: ubuntu-latest
    needs: [get_released_apps, build]
    env:
      RELEASE_NUMBER: ${{ needs.get_released_apps.outputs.release_number }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Checkout Charts
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CHARTS_REPO }}
          path: charts
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
      -
        name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      -
        name: Install yaml library
        run: python -m pip install ruamel.yaml
      -
        name: Install semver
        run: |
          wget https://github.com/ffurrer2/semver/releases/download/v2.2.0/semver_2.2.0_linux_amd64.tar.gz
          tar zxvf semver_2.2.0_linux_amd64.tar.gz
          cp semver /usr/local/bin
      -
        name: Update Helm Chart
        run: |
          cd charts
          python ../.github/scripts/update_helm_chart.py '${{ needs.get_released_apps.outputs.details }}'
          if [ $(git status | grep -c "nothing to commit") == 0 ]; then
            git config user.name ${{ secrets.REPO_ACCESS_USER }}
            git config user.email ${{ secrets.REPO_ACCESS_EMAIL }}
            git diff
            git commit -am "New chart version"
            git push
          else
              echo "No changes, skipping..."
          fi

  github-release:
    runs-on: ubuntu-latest
    needs: [get_released_apps, update-helm-chart, update-release-info]
    env:
      RELEASE_NUMBER: ${{ needs.get_released_apps.outputs.release_number }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Release
        uses: "ncipollo/release-action@v1"
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          prerelease: false
          tag: ${{ env.RELEASE_NUMBER }}
